{"ast":null,"code":"import{useEffect}from'react';import{useLocation}from'react-router-dom';/**\n * Development-only canonical fallback hook\n * Ensures canonical tags are present when using React dev server\n * This is ONLY for development - production uses SSG canonicals\n */export function useDevCanonicalFallback(){const location=useLocation();useEffect(()=>{// Only run in development environment\nif(process.env.NODE_ENV==='production'){return;}const applyCanonical=()=>{// Only run on client-side and in development\nif(typeof window==='undefined'||typeof document==='undefined')return;try{// Check if canonical already exists (avoid duplicates)\nlet existingCanonical=document.querySelector('link[rel=\"canonical\"]');// Build clean canonical URL\nconst cleanPath=location.pathname;const canonicalPath=cleanPath==='/'?'/':cleanPath.replace(/\\/$/,'');const canonicalUrl=\"\".concat(window.location.origin).concat(canonicalPath);if(!existingCanonical){// Create new canonical if none exists\nexistingCanonical=document.createElement('link');existingCanonical.setAttribute('rel','canonical');document.head.appendChild(existingCanonical);console.log('🔧 DEV: Created canonical fallback');}// Update canonical URL if it's different\nif(existingCanonical.getAttribute('href')!==canonicalUrl){existingCanonical.setAttribute('href',canonicalUrl);console.log(\"\\uD83D\\uDD27 DEV: Updated canonical to \".concat(canonicalUrl));}}catch(error){// Silent fallback - don't break the app\nconsole.warn('⚠️ DEV: Canonical fallback error:',error.message);}};// Apply canonical immediately\napplyCanonical();// Cleanup function (though not strictly needed for this use case)\nreturn()=>{// In dev, we don't remove canonicals on unmount to avoid flickering\n};},[location.pathname]);// Re-run when route changes\n}export default useDevCanonicalFallback;","map":{"version":3,"names":["useEffect","useLocation","useDevCanonicalFallback","location","process","env","NODE_ENV","applyCanonical","window","document","existingCanonical","querySelector","cleanPath","pathname","canonicalPath","replace","canonicalUrl","concat","origin","createElement","setAttribute","head","appendChild","console","log","getAttribute","error","warn","message"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/hooks/useDevCanonicalFallback.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * Development-only canonical fallback hook\n * Ensures canonical tags are present when using React dev server\n * This is ONLY for development - production uses SSG canonicals\n */\nexport function useDevCanonicalFallback() {\n  const location = useLocation();\n\n  useEffect(() => {\n    // Only run in development environment\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    const applyCanonical = () => {\n      // Only run on client-side and in development\n      if (typeof window === 'undefined' || typeof document === 'undefined') return;\n      \n      try {\n        // Check if canonical already exists (avoid duplicates)\n        let existingCanonical = document.querySelector('link[rel=\"canonical\"]');\n        \n        // Build clean canonical URL\n        const cleanPath = location.pathname;\n        const canonicalPath = cleanPath === '/' ? '/' : cleanPath.replace(/\\/$/, '');\n        const canonicalUrl = `${window.location.origin}${canonicalPath}`;\n        \n        if (!existingCanonical) {\n          // Create new canonical if none exists\n          existingCanonical = document.createElement('link');\n          existingCanonical.setAttribute('rel', 'canonical');\n          document.head.appendChild(existingCanonical);\n          console.log('🔧 DEV: Created canonical fallback');\n        }\n        \n        // Update canonical URL if it's different\n        if (existingCanonical.getAttribute('href') !== canonicalUrl) {\n          existingCanonical.setAttribute('href', canonicalUrl);\n          console.log(`🔧 DEV: Updated canonical to ${canonicalUrl}`);\n        }\n        \n      } catch (error) {\n        // Silent fallback - don't break the app\n        console.warn('⚠️ DEV: Canonical fallback error:', error.message);\n      }\n    };\n\n    // Apply canonical immediately\n    applyCanonical();\n    \n    // Cleanup function (though not strictly needed for this use case)\n    return () => {\n      // In dev, we don't remove canonicals on unmount to avoid flickering\n    };\n    \n  }, [location.pathname]); // Re-run when route changes\n}\n\nexport default useDevCanonicalFallback;"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CACjC,OAASC,WAAW,KAAQ,kBAAkB,CAE9C;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,uBAAuBA,CAAA,CAAG,CACxC,KAAM,CAAAC,QAAQ,CAAGF,WAAW,CAAC,CAAC,CAE9BD,SAAS,CAAC,IAAM,CACd;AACA,GAAII,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzC,OACF,CAEA,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B;AACA,GAAI,MAAO,CAAAC,MAAM,GAAK,WAAW,EAAI,MAAO,CAAAC,QAAQ,GAAK,WAAW,CAAE,OAEtE,GAAI,CACF;AACA,GAAI,CAAAC,iBAAiB,CAAGD,QAAQ,CAACE,aAAa,CAAC,uBAAuB,CAAC,CAEvE;AACA,KAAM,CAAAC,SAAS,CAAGT,QAAQ,CAACU,QAAQ,CACnC,KAAM,CAAAC,aAAa,CAAGF,SAAS,GAAK,GAAG,CAAG,GAAG,CAAGA,SAAS,CAACG,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAC5E,KAAM,CAAAC,YAAY,IAAAC,MAAA,CAAMT,MAAM,CAACL,QAAQ,CAACe,MAAM,EAAAD,MAAA,CAAGH,aAAa,CAAE,CAEhE,GAAI,CAACJ,iBAAiB,CAAE,CACtB;AACAA,iBAAiB,CAAGD,QAAQ,CAACU,aAAa,CAAC,MAAM,CAAC,CAClDT,iBAAiB,CAACU,YAAY,CAAC,KAAK,CAAE,WAAW,CAAC,CAClDX,QAAQ,CAACY,IAAI,CAACC,WAAW,CAACZ,iBAAiB,CAAC,CAC5Ca,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACnD,CAEA;AACA,GAAId,iBAAiB,CAACe,YAAY,CAAC,MAAM,CAAC,GAAKT,YAAY,CAAE,CAC3DN,iBAAiB,CAACU,YAAY,CAAC,MAAM,CAAEJ,YAAY,CAAC,CACpDO,OAAO,CAACC,GAAG,2CAAAP,MAAA,CAAiCD,YAAY,CAAE,CAAC,CAC7D,CAEF,CAAE,MAAOU,KAAK,CAAE,CACd;AACAH,OAAO,CAACI,IAAI,CAAC,mCAAmC,CAAED,KAAK,CAACE,OAAO,CAAC,CAClE,CACF,CAAC,CAED;AACArB,cAAc,CAAC,CAAC,CAEhB;AACA,MAAO,IAAM,CACX;AAAA,CACD,CAEH,CAAC,CAAE,CAACJ,QAAQ,CAACU,QAAQ,CAAC,CAAC,CAAE;AAC3B,CAEA,cAAe,CAAAX,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
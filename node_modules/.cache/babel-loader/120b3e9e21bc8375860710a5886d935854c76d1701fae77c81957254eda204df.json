{"ast":null,"code":"import{useEffect}from'react';import{useLocation}from'react-router-dom';/**\n * Custom hook for dynamic SEO meta tag updates during SPA navigation\n * Ensures canonical URL always matches current page URL exactly\n * Updates canonical, OG, and Twitter meta tags on route changes\n * Strips tracking parameters from canonical URLs\n */export const useDynamicSEO=()=>{const location=useLocation();useEffect(()=>{const updateCanonical=()=>{try{const loc=window.location;// Build clean canonical URL by removing tracking parameters\nconst url=new URL(loc.href);const trackingParams=['utm_source','utm_medium','utm_campaign','utm_content','utm_term','ref','gclid','fbclid','spa'];trackingParams.forEach(param=>url.searchParams.delete(param));// Create clean canonical URL - absolute URL matching current page exactly\nlet cleanUrl=url.origin+url.pathname;// Add trailing slash if not present (align with Vercel config)\nif(!cleanUrl.endsWith('/')){cleanUrl+='/';}if(url.search&&!trackingParams.some(param=>url.search.includes(param))){cleanUrl+=url.search;}// Helper functions to update/create tags\nconst setOrUpdateLink=(rel,href)=>{let tag=document.querySelector(`link[rel='${rel}']`);if(!tag){tag=document.createElement('link');tag.setAttribute('rel',rel);document.head.appendChild(tag);}tag.setAttribute('href',href);};const setOrUpdateMeta=(selector,attrName,attrValue,content)=>{let tag=document.querySelector(selector);if(!tag){tag=document.createElement('meta');tag.setAttribute(attrName,attrValue);document.head.appendChild(tag);}tag.setAttribute('content',content);};// Update canonical URL - most critical for SEO\nsetOrUpdateLink('canonical',cleanUrl);// Update Open Graph URL to match canonical\nsetOrUpdateMeta('meta[property=\"og:url\"]','property','og:url',cleanUrl);// Update Twitter URL to match canonical  \nsetOrUpdateMeta('meta[name=\"twitter:url\"]','name','twitter:url',cleanUrl);// Update Open Graph type based on path\nconst isArticle=location.pathname.includes('/blog/')&&location.pathname!=='/blog';const ogType=isArticle?'article':'website';setOrUpdateMeta('meta[property=\"og:type\"]','property','og:type',ogType);// Clean browser URL if tracking params were present\nif(loc.href!==cleanUrl&&window.history&&window.history.replaceState){const urlObj=new URL(cleanUrl);const newPath=urlObj.pathname+urlObj.search+urlObj.hash;window.history.replaceState(null,'',newPath);}// Debug log for development\nif(process.env.NODE_ENV==='development'){console.log('📍 SEO updated:',{canonical:cleanUrl,type:ogType,route:location.pathname});}// Dispatch event for other components that might need to know about SEO updates\nwindow.dispatchEvent(new CustomEvent('canonical-updated',{detail:{canonicalUrl:cleanUrl,path:location.pathname,type:ogType}}));}catch(error){console.error('❌ SEO update error:',error);}};// Update canonical on route change (critical for SPA navigation)\nupdateCanonical();// Also update on browser navigation events\nconst handlePopstate=()=>updateCanonical();window.addEventListener('popstate',handlePopstate);return()=>{window.removeEventListener('popstate',handlePopstate);};},[location.pathname,location.search]);};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
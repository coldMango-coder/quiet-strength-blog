{"ast":null,"code":"import { parseValueFromTransform } from '../../../render/dom/parse-transform.mjs';\nimport { transformPropOrder } from '../../../render/utils/keys-transform.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\nconst isNumOrPxType = v => v === number || v === px;\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter(key => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n  const removedTransforms = [];\n  nonTranslationalTransformKeys.forEach(key => {\n    const value = visualElement.getValue(key);\n    if (value !== undefined) {\n      removedTransforms.push([key, value.get()]);\n      value.set(key.startsWith(\"scale\") ? 1 : 0);\n    }\n  });\n  return removedTransforms;\n}\nconst positionalValues = {\n  // Dimensions\n  width: (_ref, _ref2) => {\n    let {\n      x\n    } = _ref;\n    let {\n      paddingLeft = \"0\",\n      paddingRight = \"0\"\n    } = _ref2;\n    return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);\n  },\n  height: (_ref3, _ref4) => {\n    let {\n      y\n    } = _ref3;\n    let {\n      paddingTop = \"0\",\n      paddingBottom = \"0\"\n    } = _ref4;\n    return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);\n  },\n  top: (_bbox, _ref5) => {\n    let {\n      top\n    } = _ref5;\n    return parseFloat(top);\n  },\n  left: (_bbox, _ref6) => {\n    let {\n      left\n    } = _ref6;\n    return parseFloat(left);\n  },\n  bottom: (_ref7, _ref8) => {\n    let {\n      y\n    } = _ref7;\n    let {\n      top\n    } = _ref8;\n    return parseFloat(top) + (y.max - y.min);\n  },\n  right: (_ref9, _ref0) => {\n    let {\n      x\n    } = _ref9;\n    let {\n      left\n    } = _ref0;\n    return parseFloat(left) + (x.max - x.min);\n  },\n  // Transform\n  x: (_bbox, _ref1) => {\n    let {\n      transform\n    } = _ref1;\n    return parseValueFromTransform(transform, \"x\");\n  },\n  y: (_bbox, _ref10) => {\n    let {\n      transform\n    } = _ref10;\n    return parseValueFromTransform(transform, \"y\");\n  }\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\nexport { isNumOrPxType, positionalValues, removeNonTranslationalTransform };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\r\n * Generates canonical URLs for trueallyguide.com pages\r\n * Ensures EXACT match between canonical URLs and live page URLs\r\n * @param {string} pathname - The pathname from router (e.g., '/blog/post')\r\n * @returns {string} - The canonical URL that exactly matches the live URL\r\n */\nexport function getCanonicalUrl(pathname) {\n  // Use environment variable for base URL, with fallback\n  const baseUrl = process.env.REACT_APP_SITE_URL || (process.env.NODE_ENV === 'production' ? 'https://trueallyguide.com' : 'http://localhost:3001');\n\n  // Normalize pathname with strict rules\n  let normalizedPath = pathname || '/';\n\n  // Remove query parameters and hash\n  normalizedPath = normalizedPath.split('?')[0].split('#')[0];\n\n  // Convert to lowercase for consistency\n  normalizedPath = normalizedPath.toLowerCase();\n\n  // Handle trailing slashes based on Vercel config - all paths should have trailing slash\n  if (!normalizedPath.endsWith('/')) {\n    normalizedPath += '/';\n  }\n\n  // Construct canonical URL\n  return `${baseUrl}${normalizedPath}`;\n}","map":{"version":3,"names":["getCanonicalUrl","pathname","baseUrl","process","env","REACT_APP_SITE_URL","NODE_ENV","normalizedPath","split","toLowerCase","endsWith"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/lib/seo/getCanonicalUrl.js"],"sourcesContent":["/**\r\n * Generates canonical URLs for trueallyguide.com pages\r\n * Ensures EXACT match between canonical URLs and live page URLs\r\n * @param {string} pathname - The pathname from router (e.g., '/blog/post')\r\n * @returns {string} - The canonical URL that exactly matches the live URL\r\n */\r\nexport function getCanonicalUrl(pathname) {\r\n  // Use environment variable for base URL, with fallback\r\n  const baseUrl = process.env.REACT_APP_SITE_URL || \r\n                  (process.env.NODE_ENV === 'production' ? 'https://trueallyguide.com' : 'http://localhost:3001');\r\n  \r\n  // Normalize pathname with strict rules\r\n  let normalizedPath = pathname || '/';\r\n  \r\n  // Remove query parameters and hash\r\n  normalizedPath = normalizedPath.split('?')[0].split('#')[0];\r\n  \r\n  // Convert to lowercase for consistency\r\n  normalizedPath = normalizedPath.toLowerCase();\r\n  \r\n  // Handle trailing slashes based on Vercel config - all paths should have trailing slash\r\n  if (!normalizedPath.endsWith('/')) {\r\n    normalizedPath += '/';\r\n  }\r\n  \r\n  // Construct canonical URL\r\n  return `${baseUrl}${normalizedPath}`;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,QAAQ,EAAE;EACxC;EACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,KAC7BF,OAAO,CAACC,GAAG,CAACE,QAAQ,KAAK,YAAY,GAAG,2BAA2B,GAAG,uBAAuB,CAAC;;EAE/G;EACA,IAAIC,cAAc,GAAGN,QAAQ,IAAI,GAAG;;EAEpC;EACAM,cAAc,GAAGA,cAAc,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE3D;EACAD,cAAc,GAAGA,cAAc,CAACE,WAAW,CAAC,CAAC;;EAE7C;EACA,IAAI,CAACF,cAAc,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;IACjCH,cAAc,IAAI,GAAG;EACvB;;EAEA;EACA,OAAO,GAAGL,OAAO,GAAGK,cAAc,EAAE;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
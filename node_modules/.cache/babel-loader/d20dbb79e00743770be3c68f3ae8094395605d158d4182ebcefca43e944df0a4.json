{"ast":null,"code":"import{useEffect}from'react';import{useLocation}from'react-router-dom';/**\n * Custom hook for dynamic SEO meta tag updates during SPA navigation\n * Ensures canonical URL always matches current page URL exactly\n * Updates canonical, OG, and Twitter meta tags on route changes\n * Strips tracking parameters from canonical URLs\n */export const useDynamicSEO=()=>{const location=useLocation();useEffect(()=>{const updateCanonical=()=>{// Only run on client-side to avoid SSR/CSR mismatches\nif(typeof window==='undefined')return;try{const loc=window.location;// Build clean canonical URL by removing tracking parameters\nconst url=new URL(loc.href);const trackingParams=['utm_source','utm_medium','utm_campaign','utm_content','utm_term','ref','gclid','fbclid','spa'];trackingParams.forEach(param=>url.searchParams.delete(param));// Create clean canonical URL - absolute URL matching current page exactly\nlet cleanUrl=url.origin+url.pathname;// Add trailing slash if not present (align with Vercel config)\nif(!cleanUrl.endsWith('/')){cleanUrl+='/';}if(url.search&&!trackingParams.some(param=>url.search.includes(param))){cleanUrl+=url.search;}// Helper functions to update/create tags\nconst setOrUpdateLink=(rel,href)=>{let tag=document.querySelector(\"link[rel='\".concat(rel,\"']\"));if(!tag){tag=document.createElement('link');tag.setAttribute('rel',rel);document.head.appendChild(tag);}tag.setAttribute('href',href);};const setOrUpdateMeta=(selector,attrName,attrValue,content)=>{let tag=document.querySelector(selector);if(!tag){tag=document.createElement('meta');tag.setAttribute(attrName,attrValue);document.head.appendChild(tag);}tag.setAttribute('content',content);};// Update canonical URL - most critical for SEO\nsetOrUpdateLink('canonical',cleanUrl);// Update Open Graph URL to match canonical\nsetOrUpdateMeta('meta[property=\"og:url\"]','property','og:url',cleanUrl);// Update Twitter URL to match canonical  \nsetOrUpdateMeta('meta[name=\"twitter:url\"]','name','twitter:url',cleanUrl);// Update Open Graph type based on path\nconst isArticle=location.pathname.includes('/blog/')&&location.pathname!=='/blog';const ogType=isArticle?'article':'website';setOrUpdateMeta('meta[property=\"og:type\"]','property','og:type',ogType);// Clean browser URL if tracking params were present\nif(loc.href!==cleanUrl&&window.history&&window.history.replaceState){const urlObj=new URL(cleanUrl);const newPath=urlObj.pathname+urlObj.search+urlObj.hash;window.history.replaceState(null,'',newPath);}// Debug log for development\nif(process.env.NODE_ENV==='development'){console.log('📍 SEO updated:',{canonical:cleanUrl,type:ogType,route:location.pathname});}// Dispatch event for other components that might need to know about SEO updates\nwindow.dispatchEvent(new CustomEvent('canonical-updated',{detail:{canonicalUrl:cleanUrl,path:location.pathname,type:ogType}}));}catch(error){console.error('❌ SEO update error:',error);}};// Update canonical on route change (critical for SPA navigation)\nupdateCanonical();// Also update on browser navigation events\nconst handlePopstate=()=>updateCanonical();window.addEventListener('popstate',handlePopstate);return()=>{window.removeEventListener('popstate',handlePopstate);};},[location.pathname,location.search]);};","map":{"version":3,"names":["useEffect","useLocation","useDynamicSEO","location","updateCanonical","window","loc","url","URL","href","trackingParams","forEach","param","searchParams","delete","cleanUrl","origin","pathname","endsWith","search","some","includes","setOrUpdateLink","rel","tag","document","querySelector","concat","createElement","setAttribute","head","appendChild","setOrUpdateMeta","selector","attrName","attrValue","content","isArticle","ogType","history","replaceState","urlObj","newPath","hash","process","env","NODE_ENV","console","log","canonical","type","route","dispatchEvent","CustomEvent","detail","canonicalUrl","path","error","handlePopstate","addEventListener","removeEventListener"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/hooks/useDynamicSEO.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * Custom hook for dynamic SEO meta tag updates during SPA navigation\n * Ensures canonical URL always matches current page URL exactly\n * Updates canonical, OG, and Twitter meta tags on route changes\n * Strips tracking parameters from canonical URLs\n */\nexport const useDynamicSEO = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    const updateCanonical = () => {\n      // Only run on client-side to avoid SSR/CSR mismatches\n      if (typeof window === 'undefined') return;\n      \n      try {\n        const loc = window.location;\n        \n        // Build clean canonical URL by removing tracking parameters\n        const url = new URL(loc.href);\n        const trackingParams = ['utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term', 'ref', 'gclid', 'fbclid', 'spa'];\n        \n        trackingParams.forEach(param => url.searchParams.delete(param));\n        \n        // Create clean canonical URL - absolute URL matching current page exactly\n        let cleanUrl = url.origin + url.pathname;\n        \n        // Add trailing slash if not present (align with Vercel config)\n        if (!cleanUrl.endsWith('/')) {\n          cleanUrl += '/';\n        }\n        \n        if (url.search && !trackingParams.some(param => url.search.includes(param))) {\n          cleanUrl += url.search;\n        }\n\n        // Helper functions to update/create tags\n        const setOrUpdateLink = (rel, href) => {\n          let tag = document.querySelector(`link[rel='${rel}']`);\n          if (!tag) {\n            tag = document.createElement('link');\n            tag.setAttribute('rel', rel);\n            document.head.appendChild(tag);\n          }\n          tag.setAttribute('href', href);\n        };\n\n        const setOrUpdateMeta = (selector, attrName, attrValue, content) => {\n          let tag = document.querySelector(selector);\n          if (!tag) {\n            tag = document.createElement('meta');\n            tag.setAttribute(attrName, attrValue);\n            document.head.appendChild(tag);\n          }\n          tag.setAttribute('content', content);\n        };\n\n        // Update canonical URL - most critical for SEO\n        setOrUpdateLink('canonical', cleanUrl);\n\n        // Update Open Graph URL to match canonical\n        setOrUpdateMeta('meta[property=\"og:url\"]', 'property', 'og:url', cleanUrl);\n\n        // Update Twitter URL to match canonical  \n        setOrUpdateMeta('meta[name=\"twitter:url\"]', 'name', 'twitter:url', cleanUrl);\n\n        // Update Open Graph type based on path\n        const isArticle = location.pathname.includes('/blog/') && location.pathname !== '/blog';\n        const ogType = isArticle ? 'article' : 'website';\n        setOrUpdateMeta('meta[property=\"og:type\"]', 'property', 'og:type', ogType);\n\n        // Clean browser URL if tracking params were present\n        if (loc.href !== cleanUrl && window.history && window.history.replaceState) {\n          const urlObj = new URL(cleanUrl);\n          const newPath = urlObj.pathname + urlObj.search + urlObj.hash;\n          window.history.replaceState(null, '', newPath);\n        }\n\n        // Debug log for development\n        if (process.env.NODE_ENV === 'development') {\n          console.log('📍 SEO updated:', { \n            canonical: cleanUrl, \n            type: ogType,\n            route: location.pathname \n          });\n        }\n\n        // Dispatch event for other components that might need to know about SEO updates\n        window.dispatchEvent(new CustomEvent('canonical-updated', { \n          detail: { canonicalUrl: cleanUrl, path: location.pathname, type: ogType } \n        }));\n\n      } catch (error) {\n        console.error('❌ SEO update error:', error);\n      }\n    };\n\n    // Update canonical on route change (critical for SPA navigation)\n    updateCanonical();\n\n    // Also update on browser navigation events\n    const handlePopstate = () => updateCanonical();\n    window.addEventListener('popstate', handlePopstate);\n\n    return () => {\n      window.removeEventListener('popstate', handlePopstate);\n    };\n  }, [location.pathname, location.search]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
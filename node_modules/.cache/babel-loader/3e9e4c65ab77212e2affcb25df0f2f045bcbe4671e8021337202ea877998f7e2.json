{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * Development-only canonical fallback hook\n * Ensures canonical tags are present when using React dev server\n * This is ONLY for development - production uses SSG canonicals\n */\nexport function useDevCanonicalFallback() {\n  _s();\n  const location = useLocation();\n  useEffect(() => {\n    // Only run in development environment\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    const applyCanonical = () => {\n      try {\n        // Check if canonical already exists (avoid duplicates)\n        let existingCanonical = document.querySelector('link[rel=\"canonical\"]');\n\n        // Build clean canonical URL\n        const cleanPath = location.pathname;\n        const canonicalPath = cleanPath === '/' ? '/' : cleanPath.replace(/\\/$/, '');\n        const canonicalUrl = `${window.location.origin}${canonicalPath}`;\n        if (!existingCanonical) {\n          // Create new canonical if none exists\n          existingCanonical = document.createElement('link');\n          existingCanonical.setAttribute('rel', 'canonical');\n          document.head.appendChild(existingCanonical);\n          console.log('🔧 DEV: Created canonical fallback');\n        }\n\n        // Update canonical URL if it's different\n        if (existingCanonical.getAttribute('href') !== canonicalUrl) {\n          existingCanonical.setAttribute('href', canonicalUrl);\n          console.log(`🔧 DEV: Updated canonical to ${canonicalUrl}`);\n        }\n      } catch (error) {\n        // Silent fallback - don't break the app\n        console.warn('⚠️ DEV: Canonical fallback error:', error.message);\n      }\n    };\n\n    // Apply canonical immediately\n    applyCanonical();\n\n    // Cleanup function (though not strictly needed for this use case)\n    return () => {\n      // In dev, we don't remove canonicals on unmount to avoid flickering\n    };\n  }, [location.pathname]); // Re-run when route changes\n}\n_s(useDevCanonicalFallback, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});\nexport default useDevCanonicalFallback;","map":{"version":3,"names":["useEffect","useLocation","useDevCanonicalFallback","_s","location","process","env","NODE_ENV","applyCanonical","existingCanonical","document","querySelector","cleanPath","pathname","canonicalPath","replace","canonicalUrl","window","origin","createElement","setAttribute","head","appendChild","console","log","getAttribute","error","warn","message"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/hooks/useDevCanonicalFallback.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * Development-only canonical fallback hook\n * Ensures canonical tags are present when using React dev server\n * This is ONLY for development - production uses SSG canonicals\n */\nexport function useDevCanonicalFallback() {\n  const location = useLocation();\n\n  useEffect(() => {\n    // Only run in development environment\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    const applyCanonical = () => {\n      try {\n        // Check if canonical already exists (avoid duplicates)\n        let existingCanonical = document.querySelector('link[rel=\"canonical\"]');\n        \n        // Build clean canonical URL\n        const cleanPath = location.pathname;\n        const canonicalPath = cleanPath === '/' ? '/' : cleanPath.replace(/\\/$/, '');\n        const canonicalUrl = `${window.location.origin}${canonicalPath}`;\n        \n        if (!existingCanonical) {\n          // Create new canonical if none exists\n          existingCanonical = document.createElement('link');\n          existingCanonical.setAttribute('rel', 'canonical');\n          document.head.appendChild(existingCanonical);\n          console.log('🔧 DEV: Created canonical fallback');\n        }\n        \n        // Update canonical URL if it's different\n        if (existingCanonical.getAttribute('href') !== canonicalUrl) {\n          existingCanonical.setAttribute('href', canonicalUrl);\n          console.log(`🔧 DEV: Updated canonical to ${canonicalUrl}`);\n        }\n        \n      } catch (error) {\n        // Silent fallback - don't break the app\n        console.warn('⚠️ DEV: Canonical fallback error:', error.message);\n      }\n    };\n\n    // Apply canonical immediately\n    applyCanonical();\n    \n    // Cleanup function (though not strictly needed for this use case)\n    return () => {\n      // In dev, we don't remove canonicals on unmount to avoid flickering\n    };\n    \n  }, [location.pathname]); // Re-run when route changes\n}\n\nexport default useDevCanonicalFallback;"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAAA,EAAG;EAAAC,EAAA;EACxC,MAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC;IACF;IAEA,MAAMC,cAAc,GAAGA,CAAA,KAAM;MAC3B,IAAI;QACF;QACA,IAAIC,iBAAiB,GAAGC,QAAQ,CAACC,aAAa,CAAC,uBAAuB,CAAC;;QAEvE;QACA,MAAMC,SAAS,GAAGR,QAAQ,CAACS,QAAQ;QACnC,MAAMC,aAAa,GAAGF,SAAS,KAAK,GAAG,GAAG,GAAG,GAAGA,SAAS,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;QAC5E,MAAMC,YAAY,GAAG,GAAGC,MAAM,CAACb,QAAQ,CAACc,MAAM,GAAGJ,aAAa,EAAE;QAEhE,IAAI,CAACL,iBAAiB,EAAE;UACtB;UACAA,iBAAiB,GAAGC,QAAQ,CAACS,aAAa,CAAC,MAAM,CAAC;UAClDV,iBAAiB,CAACW,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC;UAClDV,QAAQ,CAACW,IAAI,CAACC,WAAW,CAACb,iBAAiB,CAAC;UAC5Cc,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACnD;;QAEA;QACA,IAAIf,iBAAiB,CAACgB,YAAY,CAAC,MAAM,CAAC,KAAKT,YAAY,EAAE;UAC3DP,iBAAiB,CAACW,YAAY,CAAC,MAAM,EAAEJ,YAAY,CAAC;UACpDO,OAAO,CAACC,GAAG,CAAC,gCAAgCR,YAAY,EAAE,CAAC;QAC7D;MAEF,CAAC,CAAC,OAAOU,KAAK,EAAE;QACd;QACAH,OAAO,CAACI,IAAI,CAAC,mCAAmC,EAAED,KAAK,CAACE,OAAO,CAAC;MAClE;IACF,CAAC;;IAED;IACApB,cAAc,CAAC,CAAC;;IAEhB;IACA,OAAO,MAAM;MACX;IAAA,CACD;EAEH,CAAC,EAAE,CAACJ,QAAQ,CAACS,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC3B;AAACV,EAAA,CAhDeD,uBAAuB;EAAA,QACpBD,WAAW;AAAA;AAiD9B,eAAeC,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
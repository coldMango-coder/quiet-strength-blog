{"ast":null,"code":"/**\r\n * Generates canonical URLs for trueallyguide.com pages\r\n * Ensures EXACT match between canonical URLs and live page URLs\r\n * @param {string} pathname - The pathname from router (e.g., '/blog/post')\r\n * @returns {string} - The canonical URL that exactly matches the live URL\r\n */export function getCanonicalUrl(pathname){// Use environment variable for base URL, with fallback to current origin\nconst baseUrl=process.env.REACT_APP_SITE_URL||(typeof window!=='undefined'?window.location.origin:'http://localhost:5173');// Normalize pathname with strict rules\nlet normalizedPath=pathname||'/';// Remove query parameters and hash\nnormalizedPath=normalizedPath.split('?')[0].split('#')[0];// Convert to lowercase for consistency\nnormalizedPath=normalizedPath.toLowerCase();// Remove trailing slash except for root\nif(normalizedPath!=='/'&&normalizedPath.endsWith('/')){normalizedPath=normalizedPath.slice(0,-1);}// Construct canonical URL\nreturn\"\".concat(baseUrl).concat(normalizedPath);}","map":{"version":3,"names":["getCanonicalUrl","pathname","baseUrl","process","env","REACT_APP_SITE_URL","window","location","origin","normalizedPath","split","toLowerCase","endsWith","slice","concat"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/lib/seo/getCanonicalUrl.js"],"sourcesContent":["/**\r\n * Generates canonical URLs for trueallyguide.com pages\r\n * Ensures EXACT match between canonical URLs and live page URLs\r\n * @param {string} pathname - The pathname from router (e.g., '/blog/post')\r\n * @returns {string} - The canonical URL that exactly matches the live URL\r\n */\r\nexport function getCanonicalUrl(pathname) {\n  // Use environment variable for base URL, with fallback to current origin\n  const baseUrl = process.env.REACT_APP_SITE_URL || (typeof window !== 'undefined' ? window.location.origin : 'http://localhost:5173');\n  \r\n  // Normalize pathname with strict rules\r\n  let normalizedPath = pathname || '/';\r\n  \r\n  // Remove query parameters and hash\r\n  normalizedPath = normalizedPath.split('?')[0].split('#')[0];\r\n  \r\n  // Convert to lowercase for consistency\r\n  normalizedPath = normalizedPath.toLowerCase();\r\n  \r\n  // Remove trailing slash except for root\n  if (normalizedPath !== '/' && normalizedPath.endsWith('/')) {\n    normalizedPath = normalizedPath.slice(0, -1);\n  }\n  \r\n  // Construct canonical URL\r\n  return `${baseUrl}${normalizedPath}`;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,eAAeA,CAACC,QAAQ,CAAE,CACxC;AACA,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,GAAK,MAAO,CAAAC,MAAM,GAAK,WAAW,CAAGA,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAG,uBAAuB,CAAC,CAEpI;AACA,GAAI,CAAAC,cAAc,CAAGR,QAAQ,EAAI,GAAG,CAEpC;AACAQ,cAAc,CAAGA,cAAc,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAE3D;AACAD,cAAc,CAAGA,cAAc,CAACE,WAAW,CAAC,CAAC,CAE7C;AACA,GAAIF,cAAc,GAAK,GAAG,EAAIA,cAAc,CAACG,QAAQ,CAAC,GAAG,CAAC,CAAE,CAC1DH,cAAc,CAAGA,cAAc,CAACI,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAC9C,CAEA;AACA,SAAAC,MAAA,CAAUZ,OAAO,EAAAY,MAAA,CAAGL,cAAc,EACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
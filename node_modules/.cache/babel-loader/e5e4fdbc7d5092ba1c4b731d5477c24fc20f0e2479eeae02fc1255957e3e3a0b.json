{"ast":null,"code":"/**\n * Normalizes internal links to ensure consistency with canonical URLs\n * @param {string} href - The href attribute to normalize\n * @returns {string} - The normalized href\n */\nexport function normalizeHref(href) {\n  if (!href || typeof href !== 'string') {\n    return href;\n  }\n\n  // Skip external links, mailto, tel, etc.\n  if (href.startsWith('http') && !href.startsWith('http://trueallyguide.com') && !href.startsWith('https://trueallyguide.com') && !href.startsWith('http://www.trueallyguide.com') && !href.startsWith('https://www.trueallyguide.com')) {\n    return href;\n  }\n  if (href.startsWith('mailto:') || href.startsWith('tel:') || href.startsWith('#') || href.startsWith('javascript:')) {\n    return href;\n  }\n  let normalizedHref = href;\n\n  // Convert http to https for our domain\n  if (normalizedHref.startsWith('http://trueallyguide.com') || normalizedHref.startsWith('http://www.trueallyguide.com')) {\n    normalizedHref = normalizedHref.replace('http://', 'https://');\n  }\n\n  // Remove www. since our canonical domain is bare\n  if (normalizedHref.includes('//www.trueallyguide.com')) {\n    normalizedHref = normalizedHref.replace('//www.trueallyguide.com', '//trueallyguide.com');\n  }\n\n  // Extract path for internal links\n  let path = normalizedHref;\n  if (normalizedHref.startsWith('https://trueallyguide.com')) {\n    path = normalizedHref.replace('https://trueallyguide.com', '') || '/';\n  }\n\n  // Remove query parameters and hash for normalization (but keep in final URL)\n  const [pathPart, queryAndHash] = path.split(/[?#]/);\n  let normalizedPath = pathPart;\n\n  // Convert to lowercase\n  normalizedPath = normalizedPath.toLowerCase();\n\n  // Remove trailing slash except for root\n  if (normalizedPath !== '/' && normalizedPath.endsWith('/')) {\n    normalizedPath = normalizedPath.slice(0, -1);\n  }\n\n  // Reconstruct full URL for external-looking links\n  if (href.startsWith('https://trueallyguide.com') || href.startsWith('http://')) {\n    const queryHashPart = href.includes('?') || href.includes('#') ? href.substring(href.search(/[?#]/)) : '';\n    return `https://trueallyguide.com${normalizedPath === '/' ? '/' : normalizedPath}${queryHashPart}`;\n  }\n\n  // For relative paths, just return the normalized path\n  const queryHashPart = href.includes('?') || href.includes('#') ? href.substring(href.search(/[?#]/)) : '';\n  return `${normalizedPath === '/' ? '/' : normalizedPath}${queryHashPart}`;\n}","map":{"version":3,"names":["normalizeHref","href","startsWith","normalizedHref","replace","includes","path","pathPart","queryAndHash","split","normalizedPath","toLowerCase","endsWith","slice","queryHashPart","substring","search"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/lib/seo/normalizeHref.js"],"sourcesContent":["/**\n * Normalizes internal links to ensure consistency with canonical URLs\n * @param {string} href - The href attribute to normalize\n * @returns {string} - The normalized href\n */\nexport function normalizeHref(href) {\n  if (!href || typeof href !== 'string') {\n    return href;\n  }\n  \n  // Skip external links, mailto, tel, etc.\n  if (href.startsWith('http') && !href.startsWith('http://trueallyguide.com') && !href.startsWith('https://trueallyguide.com') && !href.startsWith('http://www.trueallyguide.com') && !href.startsWith('https://www.trueallyguide.com')) {\n    return href;\n  }\n  \n  if (href.startsWith('mailto:') || href.startsWith('tel:') || href.startsWith('#') || href.startsWith('javascript:')) {\n    return href;\n  }\n  \n  let normalizedHref = href;\n  \n  // Convert http to https for our domain\n  if (normalizedHref.startsWith('http://trueallyguide.com') || normalizedHref.startsWith('http://www.trueallyguide.com')) {\n    normalizedHref = normalizedHref.replace('http://', 'https://');\n  }\n  \n  // Remove www. since our canonical domain is bare\n  if (normalizedHref.includes('//www.trueallyguide.com')) {\n    normalizedHref = normalizedHref.replace('//www.trueallyguide.com', '//trueallyguide.com');\n  }\n  \n  // Extract path for internal links\n  let path = normalizedHref;\n  if (normalizedHref.startsWith('https://trueallyguide.com')) {\n    path = normalizedHref.replace('https://trueallyguide.com', '') || '/';\n  }\n  \n  // Remove query parameters and hash for normalization (but keep in final URL)\n  const [pathPart, queryAndHash] = path.split(/[?#]/);\n  let normalizedPath = pathPart;\n  \n  // Convert to lowercase\n  normalizedPath = normalizedPath.toLowerCase();\n  \n  // Remove trailing slash except for root\n  if (normalizedPath !== '/' && normalizedPath.endsWith('/')) {\n    normalizedPath = normalizedPath.slice(0, -1);\n  }\n  \n  // Reconstruct full URL for external-looking links\n  if (href.startsWith('https://trueallyguide.com') || href.startsWith('http://')) {\n    const queryHashPart = href.includes('?') || href.includes('#') ? \n      href.substring(href.search(/[?#]/)) : '';\n    return `https://trueallyguide.com${normalizedPath === '/' ? '/' : normalizedPath}${queryHashPart}`;\n  }\n  \n  // For relative paths, just return the normalized path\n  const queryHashPart = href.includes('?') || href.includes('#') ? \n    href.substring(href.search(/[?#]/)) : '';\n  return `${normalizedPath === '/' ? '/' : normalizedPath}${queryHashPart}`;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,IAAI,EAAE;EAClC,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IACrC,OAAOA,IAAI;EACb;;EAEA;EACA,IAAIA,IAAI,CAACC,UAAU,CAAC,MAAM,CAAC,IAAI,CAACD,IAAI,CAACC,UAAU,CAAC,0BAA0B,CAAC,IAAI,CAACD,IAAI,CAACC,UAAU,CAAC,2BAA2B,CAAC,IAAI,CAACD,IAAI,CAACC,UAAU,CAAC,8BAA8B,CAAC,IAAI,CAACD,IAAI,CAACC,UAAU,CAAC,+BAA+B,CAAC,EAAE;IACrO,OAAOD,IAAI;EACb;EAEA,IAAIA,IAAI,CAACC,UAAU,CAAC,SAAS,CAAC,IAAID,IAAI,CAACC,UAAU,CAAC,MAAM,CAAC,IAAID,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,IAAID,IAAI,CAACC,UAAU,CAAC,aAAa,CAAC,EAAE;IACnH,OAAOD,IAAI;EACb;EAEA,IAAIE,cAAc,GAAGF,IAAI;;EAEzB;EACA,IAAIE,cAAc,CAACD,UAAU,CAAC,0BAA0B,CAAC,IAAIC,cAAc,CAACD,UAAU,CAAC,8BAA8B,CAAC,EAAE;IACtHC,cAAc,GAAGA,cAAc,CAACC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC;EAChE;;EAEA;EACA,IAAID,cAAc,CAACE,QAAQ,CAAC,yBAAyB,CAAC,EAAE;IACtDF,cAAc,GAAGA,cAAc,CAACC,OAAO,CAAC,yBAAyB,EAAE,qBAAqB,CAAC;EAC3F;;EAEA;EACA,IAAIE,IAAI,GAAGH,cAAc;EACzB,IAAIA,cAAc,CAACD,UAAU,CAAC,2BAA2B,CAAC,EAAE;IAC1DI,IAAI,GAAGH,cAAc,CAACC,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC,IAAI,GAAG;EACvE;;EAEA;EACA,MAAM,CAACG,QAAQ,EAAEC,YAAY,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,MAAM,CAAC;EACnD,IAAIC,cAAc,GAAGH,QAAQ;;EAE7B;EACAG,cAAc,GAAGA,cAAc,CAACC,WAAW,CAAC,CAAC;;EAE7C;EACA,IAAID,cAAc,KAAK,GAAG,IAAIA,cAAc,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC1DF,cAAc,GAAGA,cAAc,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C;;EAEA;EACA,IAAIZ,IAAI,CAACC,UAAU,CAAC,2BAA2B,CAAC,IAAID,IAAI,CAACC,UAAU,CAAC,SAAS,CAAC,EAAE;IAC9E,MAAMY,aAAa,GAAGb,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC,IAAIJ,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC,GAC5DJ,IAAI,CAACc,SAAS,CAACd,IAAI,CAACe,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE;IAC1C,OAAO,4BAA4BN,cAAc,KAAK,GAAG,GAAG,GAAG,GAAGA,cAAc,GAAGI,aAAa,EAAE;EACpG;;EAEA;EACA,MAAMA,aAAa,GAAGb,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC,IAAIJ,IAAI,CAACI,QAAQ,CAAC,GAAG,CAAC,GAC5DJ,IAAI,CAACc,SAAS,CAACd,IAAI,CAACe,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE;EAC1C,OAAO,GAAGN,cAAc,KAAK,GAAG,GAAG,GAAG,GAAGA,cAAc,GAAGI,aAAa,EAAE;AAC3E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
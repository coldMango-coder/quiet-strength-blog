{"ast":null,"code":"import{useEffect}from'react';import{useLocation}from'react-router-dom';/**\n * Development-only canonical fallback hook\n * Ensures canonical tags are present when using React dev server\n * This is ONLY for development - production uses SSG canonicals\n */export function useDevCanonicalFallback(){const location=useLocation();useEffect(()=>{// Only run in development environment\nif(process.env.NODE_ENV==='production'){return;}const applyCanonical=()=>{try{// Check if canonical already exists (avoid duplicates)\nlet existingCanonical=document.querySelector('link[rel=\"canonical\"]');// Build clean canonical URL\nconst cleanPath=location.pathname;const canonicalPath=cleanPath==='/'?'/':cleanPath.replace(/\\/$/,'');const canonicalUrl=`${window.location.origin}${canonicalPath}`;if(!existingCanonical){// Create new canonical if none exists\nexistingCanonical=document.createElement('link');existingCanonical.setAttribute('rel','canonical');document.head.appendChild(existingCanonical);console.log('🔧 DEV: Created canonical fallback');}// Update canonical URL if it's different\nif(existingCanonical.getAttribute('href')!==canonicalUrl){existingCanonical.setAttribute('href',canonicalUrl);console.log(`🔧 DEV: Updated canonical to ${canonicalUrl}`);}}catch(error){// Silent fallback - don't break the app\nconsole.warn('⚠️ DEV: Canonical fallback error:',error.message);}};// Apply canonical immediately\napplyCanonical();// Cleanup function (though not strictly needed for this use case)\nreturn()=>{// In dev, we don't remove canonicals on unmount to avoid flickering\n};},[location.pathname]);// Re-run when route changes\n}export default useDevCanonicalFallback;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
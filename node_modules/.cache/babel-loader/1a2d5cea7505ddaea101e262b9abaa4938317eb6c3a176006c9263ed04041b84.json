{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * Custom hook for dynamic SEO meta tag updates during SPA navigation\n * Ensures canonical URL always matches current page URL exactly\n * Updates canonical, OG, and Twitter meta tags on route changes\n * Strips tracking parameters from canonical URLs\n */\nexport const useDynamicSEO = () => {\n  _s();\n  const location = useLocation();\n  useEffect(() => {\n    const updateCanonical = () => {\n      try {\n        const loc = window.location;\n\n        // Build clean canonical URL by removing tracking parameters\n        const url = new URL(loc.href);\n        const trackingParams = ['utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term', 'ref', 'gclid', 'fbclid', 'spa'];\n        trackingParams.forEach(param => url.searchParams.delete(param));\n\n        // Create clean canonical URL - absolute URL matching current page exactly\n        let cleanUrl = url.origin + url.pathname;\n        if (url.search && !trackingParams.some(param => url.search.includes(param))) {\n          cleanUrl += url.search;\n        }\n\n        // Remove trailing slash except for root\n        if (cleanUrl !== url.origin + '/' && cleanUrl.endsWith('/')) {\n          cleanUrl = cleanUrl.slice(0, -1);\n        }\n\n        // Helper functions to update/create tags\n        const setOrUpdateLink = (rel, href) => {\n          let tag = document.querySelector(`link[rel='${rel}']`);\n          if (!tag) {\n            tag = document.createElement('link');\n            tag.setAttribute('rel', rel);\n            document.head.appendChild(tag);\n          }\n          tag.setAttribute('href', href);\n        };\n        const setOrUpdateMeta = (selector, attrName, attrValue, content) => {\n          let tag = document.querySelector(selector);\n          if (!tag) {\n            tag = document.createElement('meta');\n            tag.setAttribute(attrName, attrValue);\n            document.head.appendChild(tag);\n          }\n          tag.setAttribute('content', content);\n        };\n\n        // Update canonical URL - most critical for SEO\n        setOrUpdateLink('canonical', cleanUrl);\n\n        // Update Open Graph URL to match canonical\n        setOrUpdateMeta('meta[property=\"og:url\"]', 'property', 'og:url', cleanUrl);\n\n        // Update Twitter URL to match canonical  \n        setOrUpdateMeta('meta[name=\"twitter:url\"]', 'name', 'twitter:url', cleanUrl);\n\n        // Update Open Graph type based on path\n        const isArticle = location.pathname.includes('/blog/') && location.pathname !== '/blog';\n        const ogType = isArticle ? 'article' : 'website';\n        setOrUpdateMeta('meta[property=\"og:type\"]', 'property', 'og:type', ogType);\n\n        // Clean browser URL if tracking params were present\n        if (loc.href !== cleanUrl && window.history && window.history.replaceState) {\n          const urlObj = new URL(cleanUrl);\n          const newPath = urlObj.pathname + urlObj.search + urlObj.hash;\n          window.history.replaceState(null, '', newPath);\n        }\n\n        // Debug log for development\n        if (process.env.NODE_ENV === 'development') {\n          console.log('📍 SEO updated:', {\n            canonical: cleanUrl,\n            type: ogType,\n            route: location.pathname\n          });\n        }\n\n        // Dispatch event for other components that might need to know about SEO updates\n        window.dispatchEvent(new CustomEvent('canonical-updated', {\n          detail: {\n            canonicalUrl: cleanUrl,\n            path: location.pathname,\n            type: ogType\n          }\n        }));\n      } catch (error) {\n        console.error('❌ SEO update error:', error);\n      }\n    };\n\n    // Update canonical on route change (critical for SPA navigation)\n    updateCanonical();\n\n    // Also update on browser navigation events\n    const handlePopstate = () => updateCanonical();\n    window.addEventListener('popstate', handlePopstate);\n    return () => {\n      window.removeEventListener('popstate', handlePopstate);\n    };\n  }, [location.pathname, location.search]);\n};\n_s(useDynamicSEO, \"BXcZrDMM76mmm4zA8/QV5UbMNXE=\", false, function () {\n  return [useLocation];\n});","map":{"version":3,"names":["useEffect","useLocation","useDynamicSEO","_s","location","updateCanonical","loc","window","url","URL","href","trackingParams","forEach","param","searchParams","delete","cleanUrl","origin","pathname","search","some","includes","endsWith","slice","setOrUpdateLink","rel","tag","document","querySelector","createElement","setAttribute","head","appendChild","setOrUpdateMeta","selector","attrName","attrValue","content","isArticle","ogType","history","replaceState","urlObj","newPath","hash","process","env","NODE_ENV","console","log","canonical","type","route","dispatchEvent","CustomEvent","detail","canonicalUrl","path","error","handlePopstate","addEventListener","removeEventListener"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/hooks/useDynamicSEO.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * Custom hook for dynamic SEO meta tag updates during SPA navigation\n * Ensures canonical URL always matches current page URL exactly\n * Updates canonical, OG, and Twitter meta tags on route changes\n * Strips tracking parameters from canonical URLs\n */\nexport const useDynamicSEO = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    const updateCanonical = () => {\n      try {\n        const loc = window.location;\n        \n        // Build clean canonical URL by removing tracking parameters\n        const url = new URL(loc.href);\n        const trackingParams = ['utm_source', 'utm_medium', 'utm_campaign', 'utm_content', 'utm_term', 'ref', 'gclid', 'fbclid', 'spa'];\n        \n        trackingParams.forEach(param => url.searchParams.delete(param));\n        \n        // Create clean canonical URL - absolute URL matching current page exactly\n        let cleanUrl = url.origin + url.pathname;\n        if (url.search && !trackingParams.some(param => url.search.includes(param))) {\n          cleanUrl += url.search;\n        }\n        \n        // Remove trailing slash except for root\n        if (cleanUrl !== url.origin + '/' && cleanUrl.endsWith('/')) {\n          cleanUrl = cleanUrl.slice(0, -1);\n        }\n\n        // Helper functions to update/create tags\n        const setOrUpdateLink = (rel, href) => {\n          let tag = document.querySelector(`link[rel='${rel}']`);\n          if (!tag) {\n            tag = document.createElement('link');\n            tag.setAttribute('rel', rel);\n            document.head.appendChild(tag);\n          }\n          tag.setAttribute('href', href);\n        };\n\n        const setOrUpdateMeta = (selector, attrName, attrValue, content) => {\n          let tag = document.querySelector(selector);\n          if (!tag) {\n            tag = document.createElement('meta');\n            tag.setAttribute(attrName, attrValue);\n            document.head.appendChild(tag);\n          }\n          tag.setAttribute('content', content);\n        };\n\n        // Update canonical URL - most critical for SEO\n        setOrUpdateLink('canonical', cleanUrl);\n\n        // Update Open Graph URL to match canonical\n        setOrUpdateMeta('meta[property=\"og:url\"]', 'property', 'og:url', cleanUrl);\n\n        // Update Twitter URL to match canonical  \n        setOrUpdateMeta('meta[name=\"twitter:url\"]', 'name', 'twitter:url', cleanUrl);\n\n        // Update Open Graph type based on path\n        const isArticle = location.pathname.includes('/blog/') && location.pathname !== '/blog';\n        const ogType = isArticle ? 'article' : 'website';\n        setOrUpdateMeta('meta[property=\"og:type\"]', 'property', 'og:type', ogType);\n\n        // Clean browser URL if tracking params were present\n        if (loc.href !== cleanUrl && window.history && window.history.replaceState) {\n          const urlObj = new URL(cleanUrl);\n          const newPath = urlObj.pathname + urlObj.search + urlObj.hash;\n          window.history.replaceState(null, '', newPath);\n        }\n\n        // Debug log for development\n        if (process.env.NODE_ENV === 'development') {\n          console.log('📍 SEO updated:', { \n            canonical: cleanUrl, \n            type: ogType,\n            route: location.pathname \n          });\n        }\n\n        // Dispatch event for other components that might need to know about SEO updates\n        window.dispatchEvent(new CustomEvent('canonical-updated', { \n          detail: { canonicalUrl: cleanUrl, path: location.pathname, type: ogType } \n        }));\n\n      } catch (error) {\n        console.error('❌ SEO update error:', error);\n      }\n    };\n\n    // Update canonical on route change (critical for SPA navigation)\n    updateCanonical();\n\n    // Also update on browser navigation events\n    const handlePopstate = () => updateCanonical();\n    window.addEventListener('popstate', handlePopstate);\n\n    return () => {\n      window.removeEventListener('popstate', handlePopstate);\n    };\n  }, [location.pathname, location.search]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
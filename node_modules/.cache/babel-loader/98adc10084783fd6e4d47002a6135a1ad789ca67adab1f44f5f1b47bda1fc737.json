{"ast":null,"code":"/**\n * Normalizes internal links to ensure consistency with canonical URLs\n * @param {string} href - The href attribute to normalize\n * @returns {string} - The normalized href\n */export function normalizeHref(href){if(!href||typeof href!=='string'){return href;}// Skip external links, mailto, tel, etc.\nif(href.startsWith('http')&&!href.startsWith('http://trueallyguide.com')&&!href.startsWith('https://trueallyguide.com')&&!href.startsWith('http://www.trueallyguide.com')&&!href.startsWith('https://www.trueallyguide.com')){return href;}if(href.startsWith('mailto:')||href.startsWith('tel:')||href.startsWith('#')){return href;}let normalizedHref=href;// Convert http to https and remove www for our domain (case insensitive)\nnormalizedHref=normalizedHref.replace(/^http:\\/\\/(www\\.)?trueallyguide\\.com/i,'https://trueallyguide.com');normalizedHref=normalizedHref.replace(/^https:\\/\\/www\\.trueallyguide\\.com/i,'https://trueallyguide.com');// Extract path for internal links\nlet path=normalizedHref;if(normalizedHref.startsWith('https://trueallyguide.com')){path=normalizedHref.replace('https://trueallyguide.com','')||'/';}// Remove query parameters and hash for normalization (but keep in final URL)\nconst[pathPart]=path.split(/[?#]/);let normalizedPath=pathPart;// Convert to lowercase\nnormalizedPath=normalizedPath.toLowerCase();// Remove trailing slash except for root\nif(normalizedPath!=='/'&&normalizedPath.endsWith('/')){normalizedPath=normalizedPath.slice(0,-1);}// Get query and hash parts from the original href\nconst queryHashPart=href.includes('?')||href.includes('#')?href.substring(href.search(/[?#]/)):'';// Return full URL if original was a full URL to our domain, otherwise return relative path\nif(href.toLowerCase().startsWith('http://')||href.toLowerCase().startsWith('https://')){return`https://trueallyguide.com${normalizedPath==='/'?'/':normalizedPath}${queryHashPart}`;}// For relative paths, just return the normalized path\nreturn`${normalizedPath==='/'?'/':normalizedPath}${queryHashPart}`;}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { motionValue } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { useRef, useCallback, useEffect } from 'react';\nimport { scroll } from '../render/dom/scroll/index.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nconst createScrollMotionValues = () => ({\n  scrollX: motionValue(0),\n  scrollY: motionValue(0),\n  scrollXProgress: motionValue(0),\n  scrollYProgress: motionValue(0)\n});\nconst isRefPending = ref => {\n  if (!ref) return false;\n  return !ref.current;\n};\nfunction useScroll() {\n  let {\n    container,\n    target,\n    ...options\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const values = useConstant(createScrollMotionValues);\n  const scrollAnimation = useRef(null);\n  const needsStart = useRef(false);\n  const start = useCallback(() => {\n    scrollAnimation.current = scroll((_progress, _ref) => {\n      let {\n        x,\n        y\n      } = _ref;\n      values.scrollX.set(x.current);\n      values.scrollXProgress.set(x.progress);\n      values.scrollY.set(y.current);\n      values.scrollYProgress.set(y.progress);\n    }, {\n      ...options,\n      container: container?.current || undefined,\n      target: target?.current || undefined\n    });\n    return () => {\n      scrollAnimation.current?.();\n    };\n  }, [container, target, JSON.stringify(options.offset)]);\n  useIsomorphicLayoutEffect(() => {\n    needsStart.current = false;\n    if (isRefPending(container) || isRefPending(target)) {\n      needsStart.current = true;\n      return;\n    } else {\n      return start();\n    }\n  }, [start]);\n  useEffect(() => {\n    if (needsStart.current) {\n      invariant(!isRefPending(container), \"Container ref is defined but not hydrated\", \"use-scroll-ref\");\n      invariant(!isRefPending(target), \"Target ref is defined but not hydrated\", \"use-scroll-ref\");\n      return start();\n    } else {\n      return;\n    }\n  }, [start]);\n  return values;\n}\nexport { useScroll };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
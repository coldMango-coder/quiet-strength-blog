{"ast":null,"code":"/**\n * Normalizes internal links to ensure consistency with canonical URLs\n * @param {string} href - The href attribute to normalize\n * @returns {string} - The normalized href\n */export function normalizeHref(href){if(!href||typeof href!=='string'){return href;}// Skip external links, mailto, tel, etc.\nif(href.startsWith('http')&&!href.startsWith('http://trueallyguide.com')&&!href.startsWith('https://trueallyguide.com')&&!href.startsWith('http://www.trueallyguide.com')&&!href.startsWith('https://www.trueallyguide.com')){return href;}if(href.startsWith('mailto:')||href.startsWith('tel:')||href.startsWith('#')){return href;}let normalizedHref=href;// Convert http to https and remove www for our domain (case insensitive)\nnormalizedHref=normalizedHref.replace(/^http:\\/\\/(www\\.)?trueallyguide\\.com/i,'https://trueallyguide.com');normalizedHref=normalizedHref.replace(/^https:\\/\\/www\\.trueallyguide\\.com/i,'https://trueallyguide.com');// Extract path for internal links\nlet path=normalizedHref;if(normalizedHref.startsWith('https://trueallyguide.com')){path=normalizedHref.replace('https://trueallyguide.com','')||'/';}// Remove query parameters and hash for normalization (but keep in final URL)\nconst[pathPart]=path.split(/[?#]/);let normalizedPath=pathPart;// Convert to lowercase\nnormalizedPath=normalizedPath.toLowerCase();// Remove trailing slash except for root\nif(normalizedPath!=='/'&&normalizedPath.endsWith('/')){normalizedPath=normalizedPath.slice(0,-1);}// Get query and hash parts from the original href\nconst queryHashPart=href.includes('?')||href.includes('#')?href.substring(href.search(/[?#]/)):'';// Return full URL if original was a full URL to our domain, otherwise return relative path\nif(href.toLowerCase().startsWith('http://')||href.toLowerCase().startsWith('https://')){return\"https://trueallyguide.com\".concat(normalizedPath==='/'?'/':normalizedPath).concat(queryHashPart);}// For relative paths, just return the normalized path\nreturn\"\".concat(normalizedPath==='/'?'/':normalizedPath).concat(queryHashPart);}","map":{"version":3,"names":["normalizeHref","href","startsWith","normalizedHref","replace","path","pathPart","split","normalizedPath","toLowerCase","endsWith","slice","queryHashPart","includes","substring","search","concat"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/lib/seo/normalizeHref.js"],"sourcesContent":["/**\n * Normalizes internal links to ensure consistency with canonical URLs\n * @param {string} href - The href attribute to normalize\n * @returns {string} - The normalized href\n */\nexport function normalizeHref(href) {\n  if (!href || typeof href !== 'string') {\n    return href;\n  }\n  \n  // Skip external links, mailto, tel, etc.\n  if (href.startsWith('http') && !href.startsWith('http://trueallyguide.com') && !href.startsWith('https://trueallyguide.com') && !href.startsWith('http://www.trueallyguide.com') && !href.startsWith('https://www.trueallyguide.com')) {\n    return href;\n  }\n  \n  if (href.startsWith('mailto:') || href.startsWith('tel:') || href.startsWith('#')) {\n    return href;\n  }\n  \n  let normalizedHref = href;\n  \n  // Convert http to https and remove www for our domain (case insensitive)\n  normalizedHref = normalizedHref.replace(/^http:\\/\\/(www\\.)?trueallyguide\\.com/i, 'https://trueallyguide.com');\n  normalizedHref = normalizedHref.replace(/^https:\\/\\/www\\.trueallyguide\\.com/i, 'https://trueallyguide.com');\n  \n  // Extract path for internal links\n  let path = normalizedHref;\n  if (normalizedHref.startsWith('https://trueallyguide.com')) {\n    path = normalizedHref.replace('https://trueallyguide.com', '') || '/';\n  }\n  \n  // Remove query parameters and hash for normalization (but keep in final URL)\n  const [pathPart] = path.split(/[?#]/);\n  let normalizedPath = pathPart;\n  \n  // Convert to lowercase\n  normalizedPath = normalizedPath.toLowerCase();\n  \n  // Remove trailing slash except for root\n  if (normalizedPath !== '/' && normalizedPath.endsWith('/')) {\n    normalizedPath = normalizedPath.slice(0, -1);\n  }\n  \n  // Get query and hash parts from the original href\n  const queryHashPart = href.includes('?') || href.includes('#') ? \n    href.substring(href.search(/[?#]/)) : '';\n  \n  // Return full URL if original was a full URL to our domain, otherwise return relative path\n  if (href.toLowerCase().startsWith('http://') || href.toLowerCase().startsWith('https://')) {\n    return `https://trueallyguide.com${normalizedPath === '/' ? '/' : normalizedPath}${queryHashPart}`;\n  }\n  \n  // For relative paths, just return the normalized path\n  return `${normalizedPath === '/' ? '/' : normalizedPath}${queryHashPart}`;\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,aAAaA,CAACC,IAAI,CAAE,CAClC,GAAI,CAACA,IAAI,EAAI,MAAO,CAAAA,IAAI,GAAK,QAAQ,CAAE,CACrC,MAAO,CAAAA,IAAI,CACb,CAEA;AACA,GAAIA,IAAI,CAACC,UAAU,CAAC,MAAM,CAAC,EAAI,CAACD,IAAI,CAACC,UAAU,CAAC,0BAA0B,CAAC,EAAI,CAACD,IAAI,CAACC,UAAU,CAAC,2BAA2B,CAAC,EAAI,CAACD,IAAI,CAACC,UAAU,CAAC,8BAA8B,CAAC,EAAI,CAACD,IAAI,CAACC,UAAU,CAAC,+BAA+B,CAAC,CAAE,CACrO,MAAO,CAAAD,IAAI,CACb,CAEA,GAAIA,IAAI,CAACC,UAAU,CAAC,SAAS,CAAC,EAAID,IAAI,CAACC,UAAU,CAAC,MAAM,CAAC,EAAID,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,CAAE,CACjF,MAAO,CAAAD,IAAI,CACb,CAEA,GAAI,CAAAE,cAAc,CAAGF,IAAI,CAEzB;AACAE,cAAc,CAAGA,cAAc,CAACC,OAAO,CAAC,uCAAuC,CAAE,2BAA2B,CAAC,CAC7GD,cAAc,CAAGA,cAAc,CAACC,OAAO,CAAC,qCAAqC,CAAE,2BAA2B,CAAC,CAE3G;AACA,GAAI,CAAAC,IAAI,CAAGF,cAAc,CACzB,GAAIA,cAAc,CAACD,UAAU,CAAC,2BAA2B,CAAC,CAAE,CAC1DG,IAAI,CAAGF,cAAc,CAACC,OAAO,CAAC,2BAA2B,CAAE,EAAE,CAAC,EAAI,GAAG,CACvE,CAEA;AACA,KAAM,CAACE,QAAQ,CAAC,CAAGD,IAAI,CAACE,KAAK,CAAC,MAAM,CAAC,CACrC,GAAI,CAAAC,cAAc,CAAGF,QAAQ,CAE7B;AACAE,cAAc,CAAGA,cAAc,CAACC,WAAW,CAAC,CAAC,CAE7C;AACA,GAAID,cAAc,GAAK,GAAG,EAAIA,cAAc,CAACE,QAAQ,CAAC,GAAG,CAAC,CAAE,CAC1DF,cAAc,CAAGA,cAAc,CAACG,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAC9C,CAEA;AACA,KAAM,CAAAC,aAAa,CAAGX,IAAI,CAACY,QAAQ,CAAC,GAAG,CAAC,EAAIZ,IAAI,CAACY,QAAQ,CAAC,GAAG,CAAC,CAC5DZ,IAAI,CAACa,SAAS,CAACb,IAAI,CAACc,MAAM,CAAC,MAAM,CAAC,CAAC,CAAG,EAAE,CAE1C;AACA,GAAId,IAAI,CAACQ,WAAW,CAAC,CAAC,CAACP,UAAU,CAAC,SAAS,CAAC,EAAID,IAAI,CAACQ,WAAW,CAAC,CAAC,CAACP,UAAU,CAAC,UAAU,CAAC,CAAE,CACzF,kCAAAc,MAAA,CAAmCR,cAAc,GAAK,GAAG,CAAG,GAAG,CAAGA,cAAc,EAAAQ,MAAA,CAAGJ,aAAa,EAClG,CAEA;AACA,SAAAI,MAAA,CAAUR,cAAc,GAAK,GAAG,CAAG,GAAG,CAAGA,cAAc,EAAAQ,MAAA,CAAGJ,aAAa,EACzE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
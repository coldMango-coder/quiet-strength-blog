{"ast":null,"code":"/**\r\n * Generates canonical URLs for trueallyguide.com pages\r\n * Ensures EXACT match between canonical URLs and live page URLs\r\n * @param {string} pathname - The pathname from router (e.g., '/blog/post')\r\n * @returns {string} - The canonical URL that exactly matches the live URL\r\n */\nexport function getCanonicalUrl(pathname) {\n  const baseUrl = 'https://trueallyguide.com';\n\n  // Normalize pathname with strict rules\n  let normalizedPath = pathname || '/';\n\n  // Remove query parameters and hash\n  normalizedPath = normalizedPath.split('?')[0].split('#')[0];\n\n  // Convert to lowercase for consistency\n  normalizedPath = normalizedPath.toLowerCase();\n\n  // Remove trailing slash except for root to match live URLs\n  if (normalizedPath !== '/' && normalizedPath.endsWith('/')) {\n    normalizedPath = normalizedPath.slice(0, -1);\n  }\n\n  // Ensure root path has trailing slash (matches live URL)\n  if (normalizedPath === '' || normalizedPath === '/') {\n    return `${baseUrl}/`;\n  }\n\n  // All other paths: no trailing slash (matches live URLs exactly)\n  return `${baseUrl}${normalizedPath}`;\n}","map":{"version":3,"names":["getCanonicalUrl","pathname","baseUrl","normalizedPath","split","toLowerCase","endsWith","slice"],"sources":["C:/Users/Jurek2/Downloads/Project_WEB_01/src/lib/seo/getCanonicalUrl.js"],"sourcesContent":["/**\r\n * Generates canonical URLs for trueallyguide.com pages\r\n * Ensures EXACT match between canonical URLs and live page URLs\r\n * @param {string} pathname - The pathname from router (e.g., '/blog/post')\r\n * @returns {string} - The canonical URL that exactly matches the live URL\r\n */\r\nexport function getCanonicalUrl(pathname) {\r\n  const baseUrl = 'https://trueallyguide.com';\r\n  \r\n  // Normalize pathname with strict rules\r\n  let normalizedPath = pathname || '/';\r\n  \r\n  // Remove query parameters and hash\r\n  normalizedPath = normalizedPath.split('?')[0].split('#')[0];\r\n  \r\n  // Convert to lowercase for consistency\r\n  normalizedPath = normalizedPath.toLowerCase();\r\n  \r\n  // Remove trailing slash except for root to match live URLs\r\n  if (normalizedPath !== '/' && normalizedPath.endsWith('/')) {\r\n    normalizedPath = normalizedPath.slice(0, -1);\r\n  }\r\n  \r\n  // Ensure root path has trailing slash (matches live URL)\r\n  if (normalizedPath === '' || normalizedPath === '/') {\r\n    return `${baseUrl}/`;\r\n  }\r\n  \r\n  // All other paths: no trailing slash (matches live URLs exactly)\r\n  return `${baseUrl}${normalizedPath}`;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAeA,CAACC,QAAQ,EAAE;EACxC,MAAMC,OAAO,GAAG,2BAA2B;;EAE3C;EACA,IAAIC,cAAc,GAAGF,QAAQ,IAAI,GAAG;;EAEpC;EACAE,cAAc,GAAGA,cAAc,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE3D;EACAD,cAAc,GAAGA,cAAc,CAACE,WAAW,CAAC,CAAC;;EAE7C;EACA,IAAIF,cAAc,KAAK,GAAG,IAAIA,cAAc,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC1DH,cAAc,GAAGA,cAAc,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C;;EAEA;EACA,IAAIJ,cAAc,KAAK,EAAE,IAAIA,cAAc,KAAK,GAAG,EAAE;IACnD,OAAO,GAAGD,OAAO,GAAG;EACtB;;EAEA;EACA,OAAO,GAAGA,OAAO,GAAGC,cAAc,EAAE;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
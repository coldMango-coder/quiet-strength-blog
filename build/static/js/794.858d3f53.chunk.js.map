{"version":3,"file":"static/js/794.858d3f53.chunk.js","mappings":"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","sources":["pages/BlogPostPage.js","pages/NotFoundPage.js","components/Seo.js","lib/seo/getCanonicalUrl.js"],"sourcesContent":["import React, { Suspense } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { sortedBlogPosts } from '../blogData';\nimport Seo from '../components/Seo';\nimport NotFoundPage from './NotFoundPage';\n\nconst BlogPostPage = () => {\n  const { slug } = useParams();\n  const post = sortedBlogPosts.find(p => p.slug === slug);\n\n  if (!post) {\n    return <NotFoundPage />;\n  }\n\n  const PostComponent = post.component;\n\n  return (\n    <>\n      <Seo\n        title={post.title}\n        description={post.description}\n        type=\"article\"\n        article={{\n          title: post.title,\n          authorName: 'Marica Šinko',\n          datePublished: `${post.date}T00:00:00+00:00`,\n          image: post.image,\n        }}\n      />\n      <Suspense \n        fallback={\n          <div className=\"flex justify-center items-center py-24\">\n            <div className=\"text-brand-primary animate-pulse\">Loading article...</div>\n          </div>\n        }\n      >\n        <PostComponent />\n      </Suspense>\n    </>\n  );\n};\n\nexport default BlogPostPage;","import React from 'react';\nimport NormalizedLink from '../components/NormalizedLink';\nimport { Helmet } from 'react-helmet-async';\n\nconst NotFoundPage = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Page Not Found - Quiet Strength</title>\n        <meta name=\"description\" content=\"The page you're looking for doesn't exist.\" />\n        <meta name=\"robots\" content=\"noindex, nofollow\" />\n      </Helmet>\n      <div className=\"bg-white min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-6xl font-bold text-gray-900\">404</h1>\n          <p className=\"text-xl text-gray-600 mt-4\">Page not found</p>\n          <p className=\"text-gray-500 mt-2\">The page you're looking for doesn't exist.</p>\n          <NormalizedLink \n            to=\"/\" \n            className=\"mt-6 inline-block bg-brand-dark text-white px-6 py-3 rounded-lg hover:bg-opacity-90 transition duration-300\"\n          >\n            Go back home\n          </NormalizedLink>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NotFoundPage;","import React from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { getCanonicalUrl } from '../lib/seo/getCanonicalUrl';\r\nimport { useDynamicSEO } from '../hooks/useDynamicSEO';\r\n\r\nconst Seo = ({ title, description, type = 'website', path, article, book, person, breadcrumbs }) => {\r\n  const location = useLocation();\r\n  const siteName = 'Quiet Strength';\n  const baseUrl = process.env.REACT_APP_SITE_URL || (typeof window !== 'undefined' ? window.location.origin : '');\n  \r\n  // Use dynamic SEO hook for client-side updates\r\n  useDynamicSEO();\r\n  \r\n  // Use the provided path or automatically detect from current location\r\n  const currentPath = path || location.pathname + location.search;\r\n  const canonicalUrl = getCanonicalUrl(currentPath);\r\n  const url = canonicalUrl;\r\n\r\n  const schema = [];\r\n\r\n  const baseSchema = {\r\n    '@context': 'https://schema.org',\r\n  };\r\n\r\n  if (type === 'article' && article) {\r\n    schema.push({\r\n      ...baseSchema,\r\n      '@type': 'BlogPosting',\r\n      mainEntityOfPage: {\r\n        '@type': 'WebPage',\r\n        '@id': canonicalUrl\r\n      },\r\n      headline: article.title,\r\n      description: description,\r\n      image: article.image ? [`${baseUrl}${article.image}`] : [`${baseUrl}/images/logo.png`],\r\n      author: {\n        '@type': 'Person',\n        name: article.authorName || 'Marica Šinko',\n        url: `${baseUrl}/author/marica-sinko`,\n      },\n      publisher: {\r\n        '@type': 'Organization',\r\n        name: siteName,\r\n        logo: {\r\n          '@type': 'ImageObject',\r\n          url: `${baseUrl}/images/logo.png`\r\n        }\r\n      },\r\n      datePublished: article.datePublished,\r\n      dateModified: article.dateModified || article.datePublished,\r\n      ...(article.readTime && { timeRequired: article.readTime }),\r\n      ...(article.keywords && { keywords: Array.isArray(article.keywords) ? article.keywords : article.keywords.split(',').map(k => k.trim()) }),\r\n      ...(article.category && { articleSection: article.category })\r\n    });\r\n  } else if (type === 'book' && book) {\r\n    schema.push({\r\n      ...baseSchema,\r\n      '@type': 'Book',\r\n      name: book.title,\r\n      author: {\r\n        '@type': 'Person',\r\n        name: book.authorName,\r\n      },\r\n      description: description,\r\n      ...(book.isbn && { isbn: book.isbn }),\r\n    });\r\n  } else if (type === 'person' && person) {\r\n    schema.push({\r\n      ...baseSchema,\r\n      '@type': 'Person',\r\n      name: person.name,\r\n      url: url,\r\n      ...(person.jobTitle && { jobTitle: person.jobTitle }),\r\n      ...(person.image && { image: `${baseUrl}${person.image}` }),\r\n    });\r\n  } else {\r\n    schema.push({\r\n      ...baseSchema,\r\n      '@type': 'WebSite',\r\n      name: siteName,\r\n      url: url,\r\n      potentialAction: {\r\n        '@type': 'SearchAction',\r\n        target: `${baseUrl}/search?q={search_term_string}`,\r\n        'query-input': 'required name=search_term_string'\r\n      }\r\n    });\r\n    \r\n    // Add Organization schema for homepage\r\n    if (currentPath === '/') {\r\n      schema.push({\r\n        ...baseSchema,\r\n        '@type': 'Organization',\r\n        name: siteName,\r\n        url: baseUrl,\r\n        logo: `${baseUrl}/images/logo.png`,\r\n        description: 'Self-help and productivity blog for introverted women',\r\n        sameAs: [\r\n          // Add your social media URLs here\r\n          // 'https://twitter.com/yourhandle',\r\n          // 'https://facebook.com/yourpage',\r\n          // 'https://instagram.com/yourhandle'\r\n        ]\r\n      });\r\n    }\r\n  }\r\n\r\n  if (breadcrumbs) {\r\n    schema.push({\r\n      ...baseSchema,\r\n      '@type': 'BreadcrumbList',\r\n      itemListElement: breadcrumbs.map((crumb, index) => ({\r\n        '@type': 'ListItem',\r\n        position: index + 1,\r\n        name: crumb.name,\r\n        item: `${baseUrl}${crumb.item}`,\r\n      })),\r\n    });\r\n  }\r\n\r\n  // Let React Helmet handle deduplication automatically\r\n\r\n  return (\r\n    <Helmet>\r\n      <title>{title ? `${title} | ${siteName}` : siteName}</title>\r\n      <meta name=\"description\" content={description} />\r\n      <link rel=\"canonical\" href={canonicalUrl} />\r\n\r\n      {/* Open Graph */}\r\n      <meta property=\"og:title\" content={article?.ogTitle || `${title} | ${siteName}`} />\r\n      <meta property=\"og:description\" content={article?.ogDescription || description} />\r\n      <meta property=\"og:url\" content={url} />\r\n      <meta property=\"og:type\" content={type} />\r\n      <meta property=\"og:site_name\" content={siteName} />\r\n      <meta property=\"og:locale\" content=\"en_US\" />\r\n      {(article?.ogImage || article?.image) && (\r\n        <>\r\n          <meta property=\"og:image\" content={`${baseUrl}${article.ogImage || article.image}`} />\r\n          <meta property=\"og:image:width\" content=\"1200\" />\r\n          <meta property=\"og:image:height\" content=\"630\" />\r\n          <meta property=\"og:image:alt\" content={article?.ogTitle || title} />\r\n        </>\r\n      )}\r\n      {type === 'article' && article && (\r\n        <>\r\n          <meta property=\"article:published_time\" content={article.datePublished} />\r\n          {article.dateModified && <meta property=\"article:modified_time\" content={article.dateModified} />}\r\n          <meta property=\"article:author\" content={article.authorName || 'Marica Šinko'} />\r\n          {article.category && <meta property=\"article:section\" content={article.category} />}\r\n          {article.keywords && article.keywords.map((tag, index) => \r\n            <meta key={index} property=\"article:tag\" content={tag.trim()} />\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {/* Twitter */}\r\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n      <meta name=\"twitter:site\" content=\"@QuietStrengthGuide\" />\r\n      <meta name=\"twitter:creator\" content=\"@MaricaSinko\" />\r\n      <meta name=\"twitter:title\" content={article?.twitterTitle || article?.ogTitle || `${title} | ${siteName}`} />\r\n      <meta name=\"twitter:description\" content={article?.twitterDescription || article?.ogDescription || description} />\r\n      <meta name=\"twitter:url\" content={url} />\r\n      {(article?.twitterImage || article?.ogImage || article?.image) && (\r\n        <>\r\n          <meta name=\"twitter:image\" content={`${baseUrl}${article.twitterImage || article.ogImage || article.image}`} />\r\n          <meta name=\"twitter:image:alt\" content={article?.twitterTitle || article?.ogTitle || title} />\r\n        </>\r\n      )}\r\n\r\n      {/* JSON-LD Schema */}\r\n      <script type=\"application/ld+json\">{JSON.stringify(schema.length > 1 ? schema : schema[0])}</script>\r\n    </Helmet>\r\n  );\r\n};\r\n\r\nexport default Seo;\n","/**\r\n * Generates canonical URLs for trueallyguide.com pages\r\n * Ensures EXACT match between canonical URLs and live page URLs\r\n * @param {string} pathname - The pathname from router (e.g., '/blog/post')\r\n * @returns {string} - The canonical URL that exactly matches the live URL\r\n */\r\nexport function getCanonicalUrl(pathname) {\n  // Use environment variable for base URL, with fallback to current origin\n  const baseUrl = process.env.REACT_APP_SITE_URL || (typeof window !== 'undefined' ? window.location.origin : 'http://localhost:5173');\n  \r\n  // Normalize pathname with strict rules\r\n  let normalizedPath = pathname || '/';\r\n  \r\n  // Remove query parameters and hash\r\n  normalizedPath = normalizedPath.split('?')[0].split('#')[0];\r\n  \r\n  // Convert to lowercase for consistency\r\n  normalizedPath = normalizedPath.toLowerCase();\r\n  \r\n  // Remove trailing slash except for root\n  if (normalizedPath !== '/' && normalizedPath.endsWith('/')) {\n    normalizedPath = normalizedPath.slice(0, -1);\n  }\n  \r\n  // Construct canonical URL\r\n  return `${baseUrl}${normalizedPath}`;\n}\n"],"names":["BlogPostPage","slug","useParams","post","sortedBlogPosts","find","p","_jsx","NotFoundPage","PostComponent","component","_jsxs","_Fragment","children","Seo","title","description","type","article","authorName","datePublished","concat","date","image","Suspense","fallback","className","Helmet","name","content","NormalizedLink","to","_ref","path","book","person","breadcrumbs","location","useLocation","siteName","baseUrl","process","useDynamicSEO","currentPath","pathname","search","canonicalUrl","normalizedPath","split","toLowerCase","endsWith","slice","getCanonicalUrl","url","schema","baseSchema","push","_objectSpread","mainEntityOfPage","headline","author","publisher","logo","dateModified","readTime","timeRequired","keywords","Array","isArray","map","k","trim","category","articleSection","isbn","jobTitle","potentialAction","target","sameAs","itemListElement","crumb","index","position","item","rel","href","property","ogTitle","ogDescription","ogImage","tag","twitterTitle","twitterDescription","twitterImage","JSON","stringify","length"],"sourceRoot":""}